"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-sub-unsub";
exports.ids = ["vendor-chunks/react-sub-unsub"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-sub-unsub/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/react-sub-unsub/dist/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Subs = exports.Subscribe = void 0;\n/**\n * Static functions for subscribing and unsubscribing to and from events.\n */\nclass Subscribe {\n    /**\n     * Call a function that adds a listener and returns a function that will unsubscribe the listener.\n     *\n     * The function passed in will be called immediately to add the listener,\n     * and its Unsubscribe function will be returned.\n     *\n     * @param subscribe The subscribe function, which returns an Unsubscribe. Will be called immediately.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    static subscribe(subscribe) {\n        try {\n            return subscribe();\n        }\n        catch (e) {\n            console.error(e);\n        }\n        return () => {\n            // No-op when catching an error\n        };\n    }\n    /**\n     * Subscribe to an emitter event. Returns a function that will unsubscribe the listener.\n     *\n     * @param eventEmitter The [EventEmitter](https://nodejs.org/api/events.html#class-eventemitter) to subscribe to.\n     * @param eventName The name of the event to listen for.\n     * @param listener The listener callback that is called when the event occurs.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    static subscribeEvent(eventEmitter, eventName, listener) {\n        eventEmitter.addListener(eventName, listener);\n        return () => {\n            eventEmitter.removeListener(eventName, listener);\n        };\n    }\n    /**\n     * Appends an event listener for events whose type attribute value is type. The callback argument sets the callback\n     * that will be invoked when the event is dispatched.\n     *\n     * The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the\n     * method behaves exactly as if the value was specified as options's capture.\n     *\n     * When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute\n     * value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute\n     * value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n     *\n     * Returns a function that will unsubscribe the listener.\n     *\n     * @param domObj The DOM object to subscribe to for events.\n     * @param eventName The name of the event to listen for.\n     * @param listener The listener callback that is called when the event occurs.\n     * @param options Listener-specific options. See function description.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    static subscribeDOMEvent(domObj, eventName, listener, options) {\n        domObj.addEventListener(eventName, listener, options);\n        return () => {\n            domObj.removeEventListener(eventName, listener, options);\n        };\n    }\n    /**\n     * Sets a timer which executes a function once the timer expires using `setTimeout`.\n     * Returns an unsubscribe function that clears the timeout using `clearTimeout`.\n     *\n     * @param handler A function to be executed after the timer expires.\n     * @param delay The time, in milliseconds that the timer should wait before the specified function or code is executed. If this parameter is omitted, a value of 0 is used, meaning execute \"immediately\", or more accurately, the next event cycle.\n     * @param args Additional arguments which are passed through to the handler specified.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    static setTimeout(handler, delay, ...args) {\n        const timeout = setTimeout(handler, delay, args);\n        return () => clearTimeout(timeout);\n    }\n    /**\n     * Repeatedly calls a function with a fixed time delay between each call using `setInterval`.\n     * Returns an unsubscribe function that clears the interval using `clearInterval`.\n     *\n     * @param handler A function to be executed after the timer expires.\n     * @param delay The time, in milliseconds (thousandths of a second), the timer should delay in between executions of the specified function or code. Defaults to 0 if not specified.\n     * @param args Additional arguments which are passed through to the handler once the timer expires.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    static setInterval(handler, delay, ...args) {\n        const interval = setInterval(handler, delay, args);\n        return () => clearInterval(interval);\n    }\n    /**\n     * Call all unsubscribe functions passed in. Can pass either an array of unsubscribe functions,\n     * or a single unsubscribe function.\n     *\n     * @param unsubs An array of unsubscribe functions, or a single unsubscribe function.\n     */\n    static unsubAll(unsubs) {\n        if (Array.isArray(unsubs)) {\n            unsubs.forEach((unsub) => {\n                try {\n                    unsub();\n                }\n                catch (e) {\n                    console.error(e);\n                }\n            });\n        }\n        else {\n            try {\n                unsubs();\n            }\n            catch (e) {\n                console.error(e);\n            }\n        }\n    }\n    /**\n     * Creates and returns a cleanup function that, when called, calls all unsubscribe functions provided.\n     *\n     * @param unsubs All subscriptions to be unsubscribed when the returned cleanup function is called.\n     * @returns A cleanup function that unsubscribes all subscriptions provided.\n     */\n    static createCleanup(unsubs) {\n        return () => Subscribe.unsubAll(unsubs);\n    }\n}\nexports.Subscribe = Subscribe;\n/**\n * A Subs object can be used to subscribe and unsubscribe to events,\n * and to collect subscriptions in an array to be unsubscribed all at once.\n *\n * Calling any of the subscribe functions will add the unsubscribe function to\n * an internal array. You can then call `unsubAll()` to unsubscribe all\n * at once and clear the list.\n */\nclass Subs {\n    /**\n     * Construct a new Subs object.\n     *\n     * A Subs object can be used to subscribe and unsubscribe to events,\n     * and to collect subscriptions in an array to be unsubscribed all at once.\n     *\n     * Calling any of the subscribe functions will add the unsubscribe function to\n     * an internal array. You can then call `unsubAll()` to unsubscribe all\n     * at once and clear the list.\n     *\n     * You can optionally pass in an array of unsubscribe functions to start with.\n     *\n     * @param list Optional array of unsubscribe functions. Defaults to an empty list.\n     */\n    constructor(\n    /** A list of unsubscribe functions for all subscribe calls that have been made. */\n    list = []) {\n        this.list = list;\n    }\n    /**\n     * Call a function that adds a listener and returns a function that will unsubscribe the listener.\n     *\n     * The function passed in will be called immediately to add the listener,\n     * and its Unsubscribe function will be returned.\n     *\n     * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param subscribe The subscribe function, which returns an Unsubscribe. Will be called immediately.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    subscribe(subscribe) {\n        const unsub = Subscribe.subscribe(subscribe);\n        this.push(unsub);\n        return unsub;\n    }\n    /**\n     * Subscribe to an emitter event. Returns a function that will unsubscribe the listener.\n     *\n     * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param eventEmitter The [EventEmitter](https://nodejs.org/api/events.html#class-eventemitter) to subscribe to.\n     * @param eventName The name of the event to listen for.\n     * @param listener The listener callback that is called when the event occurs.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    subscribeEvent(eventEmitter, eventName, listener) {\n        const unsub = Subscribe.subscribeEvent(eventEmitter, eventName, listener);\n        this.push(unsub);\n        return unsub;\n    }\n    /**\n     * Subscribe to an event on a DOM object (Window or Node). Returns a function that will unsubscribe the listener.\n     *\n     * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param domObj The DOM object to subscribe to for events.\n     * @param eventName The name of the event to listen for.\n     * @param listener The listener callback that is called when the event occurs.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    subscribeDOMEvent(domObj, eventName, listener) {\n        const unsub = Subscribe.subscribeDOMEvent(domObj, eventName, listener);\n        this.push(unsub);\n        return unsub;\n    }\n    /**\n     * Sets a timer which executes a function once the timer expires using `setTimeout`.\n     * Returns an unsubscribe function that clears the timeout using `clearTimeout`.\n     *\n     * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param handler A function to be executed after the timer expires.\n     * @param delay The time, in milliseconds that the timer should wait before the specified function or code is executed. If this parameter is omitted, a value of 0 is used, meaning execute \"immediately\", or more accurately, the next event cycle.\n     * @param args Additional arguments which are passed through to the handler specified.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    setTimeout(handler, delay, ...args) {\n        const timeout = setTimeout(handler, delay, args);\n        const unsub = () => clearTimeout(timeout);\n        this.push(unsub);\n        return unsub;\n    }\n    /**\n     * Repeatedly calls a function with a fixed time delay between each call using `setInterval`.\n     * Returns an unsubscribe function that clears the interval using `clearInterval`.\n     *\n     * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param handler A function to be executed after the timer expires.\n     * @param delay The time, in milliseconds (thousandths of a second), the timer should delay in between executions of the specified function or code. Defaults to 0 if not specified.\n     * @param args Additional arguments which are passed through to the handler once the timer expires.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    setInterval(handler, delay, ...args) {\n        const interval = setInterval(handler, delay, args);\n        const unsub = () => clearInterval(interval);\n        this.push(unsub);\n        return unsub;\n    }\n    /**\n     * Pushes an unsubscribe function onto the subscription list.\n     *\n     * You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param unsub The unsubscribe function to push to the subscription list.\n     */\n    push(unsub) {\n        this.list.push(unsub);\n    }\n    /**\n     * Call all unsubscribe functions and clear the unsubscribe list.\n     */\n    unsubAll() {\n        Subscribe.unsubAll(this.list);\n        // Empty the array, maintain the reference\n        this.list.splice(0, this.list.length);\n    }\n    /**\n     * Creates and returns a cleanup function that, when called, calls all unsubscribe functions and clears the unsubscribe list.\n     *\n     * @returns A cleanup function that unsubscribes all subscriptions and clears the unsubscribe list.\n     */\n    createCleanup() {\n        return () => {\n            this.unsubAll();\n        };\n    }\n}\nexports.Subs = Subs;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-sub-unsub/dist/index.js\n");

/***/ })

};
;